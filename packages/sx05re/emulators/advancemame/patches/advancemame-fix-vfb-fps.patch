diff --git a/advance/linux/vfb.c b/advance/linux/vfb.c
index c25bca05..7886f78c 100644
--- a/advance/linux/vfb.c
+++ b/advance/linux/vfb.c
@@ -1707,7 +1707,7 @@ static adv_error fb_wait_vsync_ext(void)
 	if (ioctl(fb_state.fd, FBIO_WAITFORVSYNC, 0) != 0) {
 		log_std(("WARNING:video:fb: ioctl(FBIO_WAITFORVSYNC) failed\n"));
 		/* it may be not supported, it isn't an error */
-		return -1;
+		return -2;
 	}
 
 	return 0;
@@ -1727,7 +1727,7 @@ static adv_error fb_wait_vsync_api(void)
 	if (ioctl(fb_state.fd, FBIOGET_VBLANK, &blank) != 0) {
 		log_std(("WARNING:video:fb: ioctl(FBIOGET_VBLANK) failed\n"));
 		/* it may be not supported, it isn't an error */
-		return -1;
+		return -2;
 	}
 
 	if ((blank.flags & FB_VBLANK_HAVE_COUNT) != 0) {
@@ -1803,9 +1803,13 @@ static adv_error fb_wait_vsync_vga(void)
 
 void fb_wait_vsync(void)
 {
+	adv_error res = 0;
 	switch (fb_state.wait) {
-	case fb_wait_ext:
-		if (fb_wait_vsync_ext() != 0) {
+	case fb_wait_ext: 
+		res = fb_wait_vsync_ext();
+		if (res != 0) {
+			if (res == -2)
+				break;
 			++fb_state.wait_error;
 			if (fb_state.wait_error > WAIT_ERROR_MAX)
 				fb_state.wait = fb_wait_none;
@@ -1814,7 +1818,10 @@ void fb_wait_vsync(void)
 		}
 		break;
 	case fb_wait_api:
-		if (fb_wait_vsync_api() != 0) {
+		res = fb_wait_vsync_api();
+		if (res != 0) {
+			if (res == -2)
+				break;
 			++fb_state.wait_error;
 			if (fb_state.wait_error > WAIT_ERROR_MAX)
 				fb_state.wait = fb_wait_none;
@@ -1834,18 +1841,21 @@ void fb_wait_vsync(void)
 		break;
 #endif
 	case fb_wait_detect:
-		if (fb_wait_vsync_ext() == 0) {
+		res = fb_wait_vsync_ext();
+		if (res == 0) {
 			fb_state.wait = fb_wait_ext;
 			fb_state.wait_error = 0;
-		} else if (fb_wait_vsync_api() == 0) {
+		} else if ((res = fb_wait_vsync_api()) && res == 0) {
 			fb_state.wait = fb_wait_api;
 			fb_state.wait_error = 0;
 #ifdef __i386__
-		} else if (fb_wait_vsync_vga() == 0) {
+		} else if ((res = fb_wait_vsync_vga()) && res == 0) {
 			fb_state.wait = fb_wait_vga;
 			fb_state.wait_error = 0;
 #endif
 		} else {
+			if (res==-2)
+				break;
 			++fb_state.wait_error;
 			if (fb_state.wait_error > WAIT_ERROR_MAX)
 				fb_state.wait = fb_wait_none;
diff --git a/advance/osd/glue.c b/advance/osd/glue.c
index f6990e46..2871270d 100644
--- a/advance/osd/glue.c
+++ b/advance/osd/glue.c
@@ -110,6 +110,11 @@ static struct advance_glue_context GLUE;
 /* MAME internal variables */
 extern char* cheatfile;
 extern const char *db_filename;
+
+#ifndef MESS
+	extern _globals globals;
+#endif
+
 #ifdef MESS
 const char* crcfile;
 const char* pcrcfile;
@@ -782,6 +787,13 @@ int mame_game_run(struct advance_context* context, const struct mame_option* adv
 	GLUE.sound_speed = context->video.config.fps_speed_factor;
 	GLUE.sound_fps = context->video.config.fps_fixed;
 
+#ifndef MESS
+	globals.sound_speed = &(GLUE.sound_speed);
+	globals.sound_fps = &(GLUE.sound_fps);
+	globals.fps_speed_factor = &(context->video.config.fps_speed_factor);
+	globals.fps_fixed = context->video.config.fps_fixed;
+#endif
+
 	hardware_script_info(mame_game_description(context->game), mame_game_manufacturer(context->game), mame_game_year(context->game), "Loading");
 
 	r = run_game(game_index);
diff --git a/src/mame.c b/src/mame.c
index 2d7eb97a..b37f5924 100644
--- a/src/mame.c
+++ b/src/mame.c
@@ -229,6 +229,7 @@ const char *memory_region_names[REGION_MAX] =
 	"REGION_PLDS"
 };
 
+_globals globals;
 
 /***************************************************************************
     PROTOTYPES
@@ -303,6 +304,14 @@ int run_game(int game)
 			/* then finish setting up our local machine */
 			init_machine();
 
+			printf("globals.fps_fixed: %f",globals.fps_fixed);
+			if (globals.fps_fixed > 0.0 && Machine->refresh_rate != globals.fps_fixed) {
+				*(globals.sound_fps) = globals.fps_fixed;
+				*(globals.fps_speed_factor) *= Machine->refresh_rate / globals.fps_fixed;
+				*(globals.sound_speed) = globals.fps_fixed / Machine->refresh_rate;
+				Machine->refresh_rate = globals.fps_fixed;
+			}
+
 			/* load the configuration settings and NVRAM */
 			settingsloaded = config_load_settings();
 			nvram_load();
diff --git a/src/mame.h b/src/mame.h
index 2b920a1b..a47751a8 100644
--- a/src/mame.h
+++ b/src/mame.h
@@ -182,6 +182,13 @@ struct ImageFile
 };
 #endif /* MESS */
 
+typedef struct __globals _globals;
+struct __globals {
+	double fps_fixed;
+	double* fps_speed_factor;
+	double* sound_speed;
+	double* sound_fps;
+};
 
 /* The host platform should fill these fields with the preferences specified in the GUI */
 /* or on the commandline. */